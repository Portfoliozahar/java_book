// Hashtable — хэш-таблица, методы которой синхронизированы. Не позволяет использовать null в качестве значения или ключа и не является упорядоченной.

package Map;

import java.util.Hashtable;

public class HHashtable {
    public static void main(String[] args) {
        // Создаем объект Hashtable
        Hashtable<Integer, String> hashtable = new Hashtable<>();

        // Добавляем элементы в хэш-таблицу
        hashtable.put(1, "Value 1");
        hashtable.put(2, "Value 2");
        hashtable.put(3, "Value 3");

        // Выводим текущее состояние хэш-таблицы
        System.out.println("Current hashtable: " + hashtable);

        // Получаем значение по ключу
        String value = hashtable.get(2);
        System.out.println("Value for key 2: " + value);

        // Удаляем элемент по ключу
        String removedValue = hashtable.remove(3);
        System.out.println("Removed value: " + removedValue);

        // Проверяем наличие ключа
        boolean containsKey = hashtable.containsKey(1);
        System.out.println("Contains key 1? " + containsKey);

        // Проверяем наличие значения
        boolean containsValue = hashtable.containsValue("Value 2");
        System.out.println("Contains value 'Value 2'? " + containsValue);

        // Получаем размер хэш-таблицы
        int size = hashtable.size();
        System.out.println("Hashtable size: " + size);
    }
}

// В данном коде мы создаем объект Hashtable с использованием типов Integer в
// качестве ключей и String в качестве значений.

// Мы добавляем элементы в хэш-таблицу с помощью метода put(), указывая ключ и
// значение.
// В данном примере мы добавляем три элемента: ключ 1 со значением "Value 1",
// ключ 2 со значением "Value 2" и ключ 3 со значением "Value 3".

// Затем мы выводим текущее состояние хэш-таблицы с помощью метода toString() и
// оператора println(). В результате мы увидим содержимое хэш-таблицы, например:
// {1=Value 1, 2=Value 2, 3=Value 3}.

// Далее мы используем метод get() для получения значения по ключу. Мы указываем
// ключ 2 и получаем значение "Value 2". Это демонстрирует возможность быстрого
// доступа к значениям в хэш-таблице по ключу.

// Затем мы используем метод remove() для удаления элемента по ключу. Мы
// указываем ключ 3 и получаем удаленное значение "Value 3". Теперь хэш-таблица
// содержит только два элемента.

// Мы также используем методы containsKey() и containsValue() для проверки
// наличия ключа и значения в хэш-таблице.
// В данном примере хэш-таблица содержит ключ 1 и значение "Value 2", поэтому
// соответствующие методы вернут true.

// Наконец, мы используем метод size() для получения размера хэш-таблицы и
// выводим его значение, которое равно 2.

// Этот пример демонстрирует основные возможности класса Hashtable, включая
// добавление элементов, получение значения по ключу,
// удаление элемента по ключу и проверку наличия ключей и значений. Кроме того,
// класс Hashtable обеспечивает синхронизацию своих методов,
// что делает его потокобезопасным для использования в многопоточных средах.